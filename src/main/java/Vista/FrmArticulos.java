/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.ctrlarticulo;
import Modelo.Articulo;
import Modelo.Clasificacion;
import Modelo.Coleccion;
import Modelo.Proveedor;
import Modelo.UnidadMedida;
import com.arangodb.ArangoCursor;
import com.arangodb.ArangoDB;
import com.arangodb.ArangoDBException;
import com.arangodb.entity.BaseDocument;
import com.arangodb.util.MapBuilder;
import java.awt.event.ItemEvent;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import sun.util.BuddhistCalendar;

/**
 *
 * @author Saul
 */
public class FrmArticulos extends javax.swing.JFrame {

    /**
     * Creates new form FrmArticulos
     */
    String idproveedor;
    int idclasificacion=0;
    float stock;
    float stock_min;
    float stock_max;
    float iva;
    public FrmArticulos() {
        initComponents();
        FillComboDepartamento(cmbDepartamento);
        FillComboCategoria(cmbCategoria);
        FillComboSubcategoria(cmbSubCategoria);
        FillComboProveedores(cmbProveedor);
        FillComboUnidadMedida(cmbUnidadMedidaPrincipal);
        FillComboUnidadMedida(cmbUnidadAsociados);
        txtIVA.setEnabled(false);
        txtDescripcion.setEnabled(false);
        //FillComboLinea(cmbLinea);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbpAsociados = new javax.swing.JTabbedPane();
        pnlAnexos = new javax.swing.JPanel();
        etCodigoBarras = new javax.swing.JLabel();
        txtCodigoBarras = new javax.swing.JTextField();
        etCodigoInterno = new javax.swing.JLabel();
        txtCodigoInterno = new javax.swing.JTextField();
        etDescripcionNormal = new javax.swing.JLabel();
        txtDescripcionNormal = new javax.swing.JTextField();
        etDescripcionCorta = new javax.swing.JLabel();
        txtDescripcionCorta = new javax.swing.JTextField();
        etProveedor = new javax.swing.JLabel();
        cmbProveedor = new javax.swing.JComboBox();
        cmbDepartamento = new javax.swing.JComboBox();
        etDepartamento = new javax.swing.JLabel();
        cmbLinea = new javax.swing.JComboBox();
        etProveedor2 = new javax.swing.JLabel();
        etSubCategoria = new javax.swing.JLabel();
        etLinea = new javax.swing.JLabel();
        cmbCategoria = new javax.swing.JComboBox();
        cmbSubCategoria = new javax.swing.JComboBox();
        etUnidad = new javax.swing.JLabel();
        cmbUnidadMedidaPrincipal = new javax.swing.JComboBox();
        etCategoria = new javax.swing.JLabel();
        spnpiezas = new javax.swing.JSpinner();
        spnStock = new javax.swing.JSpinner();
        etStock = new javax.swing.JLabel();
        spnStockMinimo = new javax.swing.JSpinner();
        etStockMinimo = new javax.swing.JLabel();
        spnStockMaximo = new javax.swing.JSpinner();
        etStockMaximo = new javax.swing.JLabel();
        etCosto = new javax.swing.JLabel();
        txtCosto = new javax.swing.JTextField();
        txtUtilidad = new javax.swing.JTextField();
        etUtilidad = new javax.swing.JLabel();
        txtIVA = new javax.swing.JTextField();
        etIVA = new javax.swing.JLabel();
        txtPrecioVenta = new javax.swing.JTextField();
        etPrecioVenta = new javax.swing.JLabel();
        btnGuardarArticulo = new javax.swing.JButton();
        chbIva = new javax.swing.JCheckBox();
        pnlAsociados = new javax.swing.JPanel();
        etCodigoBarras1 = new javax.swing.JLabel();
        txtCodigoBarras1 = new javax.swing.JTextField();
        etCodigoInterno1 = new javax.swing.JLabel();
        txtCodigoInterno1 = new javax.swing.JTextField();
        etDescripcionNormal1 = new javax.swing.JLabel();
        txtDescripcionNormal1 = new javax.swing.JTextField();
        txtDescripcionCorta1 = new javax.swing.JTextField();
        etDescripcionCorta1 = new javax.swing.JLabel();
        etUnidad1 = new javax.swing.JLabel();
        cmbUnidadAsociados = new javax.swing.JComboBox();
        etCosto1 = new javax.swing.JLabel();
        txtCosto1 = new javax.swing.JTextField();
        etProveedor3 = new javax.swing.JLabel();
        spnpiezasasociados = new javax.swing.JSpinner();
        etUtilidad1 = new javax.swing.JLabel();
        txtUtilidad1 = new javax.swing.JTextField();
        etPrecioVenta1 = new javax.swing.JLabel();
        txtPrecioVenta1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblArticulosDesign = new javax.swing.JTable();
        etCodigoBarras2 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        btnGuardarArticulo2 = new javax.swing.JButton();
        txtCodigoBarrasAsociado1 = new javax.swing.JTextField();
        etTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlAnexos.setLayout(null);

        etCodigoBarras.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etCodigoBarras.setText("Código de barras:");
        pnlAnexos.add(etCodigoBarras);
        etCodigoBarras.setBounds(10, 11, 99, 15);

        txtCodigoBarras.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(txtCodigoBarras);
        txtCodigoBarras.setBounds(10, 32, 231, 30);

        etCodigoInterno.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etCodigoInterno.setText("Código Interno");
        pnlAnexos.add(etCodigoInterno);
        etCodigoInterno.setBounds(272, 11, 100, 15);

        txtCodigoInterno.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(txtCodigoInterno);
        txtCodigoInterno.setBounds(270, 30, 170, 30);

        etDescripcionNormal.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etDescripcionNormal.setText("Descripción normal:");
        pnlAnexos.add(etDescripcionNormal);
        etDescripcionNormal.setBounds(480, 10, 111, 15);

        txtDescripcionNormal.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(txtDescripcionNormal);
        txtDescripcionNormal.setBounds(480, 30, 440, 30);

        etDescripcionCorta.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etDescripcionCorta.setText("Descripción corta:");
        pnlAnexos.add(etDescripcionCorta);
        etDescripcionCorta.setBounds(10, 71, 99, 15);

        txtDescripcionCorta.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(txtDescripcionCorta);
        txtDescripcionCorta.setBounds(10, 92, 430, 30);

        etProveedor.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etProveedor.setText("Proveedor:");
        pnlAnexos.add(etProveedor);
        etProveedor.setBounds(480, 70, 59, 15);

        cmbProveedor.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(cmbProveedor);
        cmbProveedor.setBounds(480, 90, 440, 30);

        cmbDepartamento.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(cmbDepartamento);
        cmbDepartamento.setBounds(10, 152, 201, 30);

        etDepartamento.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etDepartamento.setText("Departamento:");
        pnlAnexos.add(etDepartamento);
        etDepartamento.setBounds(10, 131, 100, 15);

        cmbLinea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(cmbLinea);
        cmbLinea.setBounds(710, 150, 210, 30);

        etProveedor2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etProveedor2.setText("Piezas:");
        pnlAnexos.add(etProveedor2);
        etProveedor2.setBounds(230, 200, 40, 15);

        etSubCategoria.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etSubCategoria.setText("Sub-Categoría:");
        pnlAnexos.add(etSubCategoria);
        etSubCategoria.setBounds(480, 130, 100, 15);

        etLinea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etLinea.setText("Línea:");
        pnlAnexos.add(etLinea);
        etLinea.setBounds(710, 130, 34, 15);

        cmbCategoria.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(cmbCategoria);
        cmbCategoria.setBounds(229, 152, 210, 30);

        cmbSubCategoria.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cmbSubCategoria.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSubCategoriaItemStateChanged(evt);
            }
        });
        pnlAnexos.add(cmbSubCategoria);
        cmbSubCategoria.setBounds(480, 150, 210, 30);

        etUnidad.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etUnidad.setText("Unidad:");
        pnlAnexos.add(etUnidad);
        etUnidad.setBounds(10, 200, 100, 15);

        cmbUnidadMedidaPrincipal.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(cmbUnidadMedidaPrincipal);
        cmbUnidadMedidaPrincipal.setBounds(10, 220, 201, 30);

        etCategoria.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etCategoria.setText("Categoría:");
        pnlAnexos.add(etCategoria);
        etCategoria.setBounds(229, 131, 57, 15);
        pnlAnexos.add(spnpiezas);
        spnpiezas.setBounds(230, 220, 210, 30);
        pnlAnexos.add(spnStock);
        spnStock.setBounds(480, 220, 120, 30);

        etStock.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etStock.setText("Stock:");
        pnlAnexos.add(etStock);
        etStock.setBounds(480, 200, 33, 15);
        pnlAnexos.add(spnStockMinimo);
        spnStockMinimo.setBounds(640, 220, 120, 30);

        etStockMinimo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etStockMinimo.setText("Stock Mínimo:");
        pnlAnexos.add(etStockMinimo);
        etStockMinimo.setBounds(640, 200, 90, 15);
        pnlAnexos.add(spnStockMaximo);
        spnStockMaximo.setBounds(800, 220, 120, 30);

        etStockMaximo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etStockMaximo.setText("Stock Máximo:");
        pnlAnexos.add(etStockMaximo);
        etStockMaximo.setBounds(800, 200, 90, 15);

        etCosto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etCosto.setText("Costo:");
        pnlAnexos.add(etCosto);
        etCosto.setBounds(10, 260, 36, 15);

        txtCosto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(txtCosto);
        txtCosto.setBounds(10, 280, 200, 30);

        txtUtilidad.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtUtilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUtilidadActionPerformed(evt);
            }
        });
        pnlAnexos.add(txtUtilidad);
        txtUtilidad.setBounds(230, 280, 210, 30);

        etUtilidad.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etUtilidad.setText("Utilidad (%):");
        pnlAnexos.add(etUtilidad);
        etUtilidad.setBounds(230, 260, 90, 15);

        txtIVA.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(txtIVA);
        txtIVA.setBounds(710, 280, 210, 30);

        etIVA.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etIVA.setText("I.V.A");
        pnlAnexos.add(etIVA);
        etIVA.setBounds(710, 260, 30, 15);

        txtPrecioVenta.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAnexos.add(txtPrecioVenta);
        txtPrecioVenta.setBounds(480, 280, 210, 30);

        etPrecioVenta.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etPrecioVenta.setText("Precio venta:");
        pnlAnexos.add(etPrecioVenta);
        etPrecioVenta.setBounds(480, 260, 70, 15);

        btnGuardarArticulo.setBackground(new java.awt.Color(102, 255, 102));
        btnGuardarArticulo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnGuardarArticulo.setForeground(new java.awt.Color(51, 51, 51));
        btnGuardarArticulo.setText("Guardar artículo");
        btnGuardarArticulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarArticuloActionPerformed(evt);
            }
        });
        pnlAnexos.add(btnGuardarArticulo);
        btnGuardarArticulo.setBounds(10, 343, 200, 30);

        chbIva.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chbIvaStateChanged(evt);
            }
        });
        pnlAnexos.add(chbIva);
        chbIva.setBounds(740, 260, 30, 20);

        tbpAsociados.addTab("Artículo", pnlAnexos);

        pnlAsociados.setLayout(null);

        etCodigoBarras1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etCodigoBarras1.setText("Código de barras:");
        pnlAsociados.add(etCodigoBarras1);
        etCodigoBarras1.setBounds(0, 70, 99, 15);

        txtCodigoBarras1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAsociados.add(txtCodigoBarras1);
        txtCodigoBarras1.setBounds(0, 90, 170, 30);

        etCodigoInterno1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etCodigoInterno1.setText("Código interno:");
        pnlAsociados.add(etCodigoInterno1);
        etCodigoInterno1.setBounds(200, 70, 84, 15);

        txtCodigoInterno1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAsociados.add(txtCodigoInterno1);
        txtCodigoInterno1.setBounds(200, 90, 170, 30);

        etDescripcionNormal1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etDescripcionNormal1.setText("Descripción normal:");
        pnlAsociados.add(etDescripcionNormal1);
        etDescripcionNormal1.setBounds(390, 70, 111, 15);

        txtDescripcionNormal1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAsociados.add(txtDescripcionNormal1);
        txtDescripcionNormal1.setBounds(390, 90, 280, 30);

        txtDescripcionCorta1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAsociados.add(txtDescripcionCorta1);
        txtDescripcionCorta1.setBounds(700, 90, 230, 30);

        etDescripcionCorta1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etDescripcionCorta1.setText("Descripción corta:");
        pnlAsociados.add(etDescripcionCorta1);
        etDescripcionCorta1.setBounds(700, 70, 99, 15);

        etUnidad1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etUnidad1.setText("Unidad:");
        pnlAsociados.add(etUnidad1);
        etUnidad1.setBounds(0, 140, 100, 15);

        cmbUnidadAsociados.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAsociados.add(cmbUnidadAsociados);
        cmbUnidadAsociados.setBounds(0, 160, 170, 30);

        etCosto1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etCosto1.setText("Costo:");
        pnlAsociados.add(etCosto1);
        etCosto1.setBounds(390, 140, 50, 15);

        txtCosto1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAsociados.add(txtCosto1);
        txtCosto1.setBounds(390, 160, 130, 30);

        etProveedor3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etProveedor3.setText("Piezas:");
        pnlAsociados.add(etProveedor3);
        etProveedor3.setBounds(200, 140, 40, 15);
        pnlAsociados.add(spnpiezasasociados);
        spnpiezasasociados.setBounds(200, 160, 170, 30);

        etUtilidad1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etUtilidad1.setText("Utilidad (%):");
        pnlAsociados.add(etUtilidad1);
        etUtilidad1.setBounds(540, 140, 90, 15);

        txtUtilidad1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtUtilidad1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUtilidad1ActionPerformed(evt);
            }
        });
        pnlAsociados.add(txtUtilidad1);
        txtUtilidad1.setBounds(540, 160, 130, 30);

        etPrecioVenta1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etPrecioVenta1.setText("Precio venta:");
        pnlAsociados.add(etPrecioVenta1);
        etPrecioVenta1.setBounds(700, 140, 70, 15);

        txtPrecioVenta1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAsociados.add(txtPrecioVenta1);
        txtPrecioVenta1.setBounds(700, 160, 130, 30);

        tblArticulosDesign.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.white));
        jScrollPane1.setViewportView(tblArticulosDesign);

        pnlAsociados.add(jScrollPane1);
        jScrollPane1.setBounds(10, 230, 930, 130);

        etCodigoBarras2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        etCodigoBarras2.setText("Código de barras de articulo principal:");
        pnlAsociados.add(etCodigoBarras2);
        etCodigoBarras2.setBounds(0, 30, 220, 15);

        txtDescripcion.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlAsociados.add(txtDescripcion);
        txtDescripcion.setBounds(440, 20, 210, 30);

        btnGuardarArticulo2.setBackground(new java.awt.Color(102, 255, 102));
        btnGuardarArticulo2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnGuardarArticulo2.setForeground(new java.awt.Color(51, 51, 51));
        btnGuardarArticulo2.setText("Guardar");
        btnGuardarArticulo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarArticulo2ActionPerformed(evt);
            }
        });
        pnlAsociados.add(btnGuardarArticulo2);
        btnGuardarArticulo2.setBounds(840, 160, 100, 30);

        txtCodigoBarrasAsociado1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtCodigoBarrasAsociado1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoBarrasAsociado1ActionPerformed(evt);
            }
        });
        pnlAsociados.add(txtCodigoBarrasAsociado1);
        txtCodigoBarrasAsociado1.setBounds(220, 20, 210, 30);

        tbpAsociados.addTab("Asociados", pnlAsociados);

        etTitulo.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        etTitulo.setText("Administración de artículos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbpAsociados, javax.swing.GroupLayout.PREFERRED_SIZE, 979, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(60, 77, Short.MAX_VALUE)
                    .addComponent(etTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 307, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addComponent(tbpAsociados, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 3, Short.MAX_VALUE)
                    .addComponent(etTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 438, Short.MAX_VALUE)))
        );

        setSize(new java.awt.Dimension(1030, 530));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private int ConsultaridlineaByNombre(String nombrelinea)
    {
        int idlinea=0;
        Object obj;
        Coleccion coleccion = new Coleccion();
        final ArangoDB arangoDB = new 
          ArangoDB.Builder()
            .password("")
            .host("127.0.0.1")
            .port(8529)
            .user("root")
            .build();
        Clasificacion clasificacion=new Clasificacion();
     try {
  String query = "FOR linea IN Clasificacion FILTER linea.descripcion == @descripcion RETURN linea";
  Map<String, Object> bindVars = new MapBuilder().put("descripcion",nombrelinea).get();
  ArangoCursor<BaseDocument> cursor = arangoDB.db(coleccion.getNombrebd()).query(query, bindVars, null,
      BaseDocument.class);
    
   cursor.forEachRemaining(aDocument -> {
     clasificacion.setIdclasificacion(Integer.parseInt(aDocument.getAttribute("id_clasificacion").toString()));
       //System.out.println(aDocument.getAttribute("id_clasificacion").toString());
  });
  
  
} catch (ArangoDBException e) {
  System.err.println("Failed to execute query. " + e.getMessage());
}   
     return clasificacion.getIdclasificacion();
    }
    
    private void CleanFields ()
    {
        txtCodigoBarras.setText(" ");
        txtDescripcionCorta.setText(" ");
        txtDescripcionNormal.setText(" ");
        txtCodigoInterno.setText(" ");
        spnpiezas.setValue(0);
        spnStock.setValue(0);
        spnStockMaximo.setValue(0);
        spnStockMinimo.setValue(0);
        txtCosto.setText(" ");
        txtUtilidad.setText(" ");
        txtPrecioVenta.setText(" ");
        txtIVA.setText(" ");
        
    }
    
    private String ConsultarUnidadMedidaByNombre(String unidadmedida)
    {
        Coleccion coleccion = new Coleccion();
        final ArangoDB arangoDB = new 
          ArangoDB.Builder()
            .password("")
            .host("127.0.0.1")
            .port(8529)
            .user("root")
            .build();
        UnidadMedida unidad =new UnidadMedida();
     try {
  String query = "FOR unidad IN UnidadMedida FILTER unidad.descripcion == @descripcion RETURN unidad";
  Map<String, Object> bindVars = new MapBuilder().put("descripcion",unidadmedida).get();
  ArangoCursor<BaseDocument> cursor = arangoDB.db(coleccion.getNombrebd()).query(query, bindVars, null,
      BaseDocument.class);
    
   cursor.forEachRemaining(aDocument -> {
     unidad.setId_unidad(aDocument.getAttribute("id_unidad").toString());
       //System.out.println(aDocument.getAttribute("id_clasificacion").toString());
  });
  
  
} catch (ArangoDBException e) {
  System.err.println("Failed to execute query. " + e.getMessage());
}   
     return unidad.getId_unidad();
    
    }
    
    private void ConsultarArticuloPrincipalByCod_Barras(String codbarras)
    {
     Coleccion coleccion = new Coleccion();
        final ArangoDB arangoDB = new 
          ArangoDB.Builder()
            .password("")
            .host("127.0.0.1")
            .port(8529)
            .user("root")
            .build();
     try {
  String query = "FOR art IN Articulo FILTER art.cod_barras == @codbarras AND art.tipo_articulo == \"principal\"  RETURN art";
  Map<String, Object> bindVars = new MapBuilder().put("codbarras",codbarras).get();
  ArangoCursor<BaseDocument> cursor = arangoDB.db(coleccion.getNombrebd()).query(query, bindVars, null,
      BaseDocument.class);
    
   cursor.forEachRemaining(aDocument -> {
       txtDescripcion.setText(aDocument.getAttribute("descripcion_corta").toString());
       idclasificacion=Integer.parseInt(aDocument.getAttribute("id_clasificacion").toString());
       idproveedor=aDocument.getAttribute("id_proveedor").toString();
       stock=Float.parseFloat(aDocument.getAttribute("stock").toString());
       stock_min=Float.parseFloat(aDocument.getAttribute("stock_min").toString());
       stock_min=Float.parseFloat(aDocument.getAttribute("stock_max").toString());
       iva=Float.parseFloat(aDocument.getAttribute("iva").toString());
  });
  
  
} catch (ArangoDBException e) {
  System.err.println("Failed to execute query. " + e.getMessage());
}   

    }
    
    private String ConsultarProveedorByNombre(String proveedor)
    {
        Coleccion coleccion = new Coleccion();
        final ArangoDB arangoDB = new 
          ArangoDB.Builder()
            .password("")
            .host("127.0.0.1")
            .port(8529)
            .user("root")
            .build();
        Proveedor provee =new Proveedor();
     try {
  String query = "FOR provee IN Proveedor FILTER provee.nombrecontacto == @descripcion RETURN provee";
  Map<String, Object> bindVars = new MapBuilder().put("descripcion",proveedor).get();
  ArangoCursor<BaseDocument> cursor = arangoDB.db(coleccion.getNombrebd()).query(query, bindVars, null,
      BaseDocument.class);
    
   cursor.forEachRemaining(aDocument -> {
        provee.setIdproveedor(aDocument.getAttribute("id_proveedor").toString());
       //System.out.println(aDocument.getAttribute("id_clasificacion").toString());
  });
  
  
} catch (ArangoDBException e) {
  System.err.println("Failed to execute query. " + e.getMessage());
}   
     return provee.getIdproveedor();
    }
    
    private void btnGuardarArticuloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarArticuloActionPerformed
        Articulo art = new Articulo();
        Clasificacion clas = new Clasificacion();
        UnidadMedida unidad = new UnidadMedida();        
        Proveedor provee= new Proveedor();
        Calendar fecharegistro = Calendar.getInstance();
        art.setCod_barras(txtCodigoBarras.getText());
        art.setCodinterno(txtCodigoInterno.getText());
        art.setDescripcion(txtDescripcionNormal.getText().toUpperCase());
        art.setDescripcioncorta(txtDescripcionCorta.getText().toUpperCase());
        provee.setIdproveedor(ConsultarProveedorByNombre(cmbProveedor.getSelectedItem().toString()));
        art.setProveedor(provee);
        clas.setIdclasificacion(ConsultaridlineaByNombre(cmbLinea.getSelectedItem().toString()));
        art.setClasificacion(clas);
        unidad.setId_unidad(ConsultarUnidadMedidaByNombre(cmbUnidadMedidaPrincipal.getSelectedItem().toString()));
        art.setUnidadmedida(unidad);
        art.setCantidad_um(Float.parseFloat(spnpiezas.getValue().toString()));
        art.setStock(Integer.parseInt(spnStock.getValue().toString()));
        art.setStock_min(Float.parseFloat(spnStockMinimo.getValue().toString()));
        art.setStock_max(Float.parseFloat(spnStockMaximo.getValue().toString()));
        art.setPrecio_compra(Float.parseFloat(txtCosto.getText()));
        art.setUtilidad(Float.parseFloat(txtUtilidad.getText()));
        art.setPrecio_venta(Float.parseFloat(txtPrecioVenta.getText()));
        if(chbIva.isSelected())
        {
            art.setIva(Float.parseFloat(txtIVA.getText()));
        }else
        {
            art.setIva(0);
            
        }
        art.setFecha_registro(fecharegistro.get(Calendar.DAY_OF_MONTH)+"/"+fecharegistro.get(Calendar.MONTH)+"/"+fecharegistro.get(Calendar.YEAR));
        art.setArticulo_disponible(1);
        art.setCodasociados("--");
        art.setTipo_articulo("principal");
        ctrlarticulo.AddArticuloPrincipal(art);
        JOptionPane.showMessageDialog(null, "El artículo "+txtDescripcionNormal.getText().toUpperCase()+" fue registrado exitosamente");
        CleanFields();
    }//GEN-LAST:event_btnGuardarArticuloActionPerformed

    private void cmbSubCategoriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSubCategoriaItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {            
            cmbLinea.removeAllItems();
            FillComboLinea(cmbLinea, cmbSubCategoria);
            
        }
         
    }//GEN-LAST:event_cmbSubCategoriaItemStateChanged

    private void txtUtilidad1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUtilidad1ActionPerformed
        this.precioVentaAnexo();
    }//GEN-LAST:event_txtUtilidad1ActionPerformed

    private void txtUtilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUtilidadActionPerformed
        precioVenta();
    }//GEN-LAST:event_txtUtilidadActionPerformed

    private void chbIvaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chbIvaStateChanged
        if(chbIva.isSelected())
        {
            txtIVA.setEnabled(true);
            txtIVA.setText("");
        }else
        {
            txtIVA.setEnabled(false);
            txtIVA.setText("0");
        }
        
    }//GEN-LAST:event_chbIvaStateChanged

    private void btnGuardarArticulo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarArticulo2ActionPerformed
        Articulo art = new Articulo();
        Clasificacion clas = new Clasificacion();
        UnidadMedida unidad = new UnidadMedida();        
        Proveedor provee= new Proveedor();
        Calendar fecharegistro = Calendar.getInstance();
        art.setCod_barras(txtCodigoBarras1.getText());
        art.setCodinterno(txtCodigoInterno1.getText());
        art.setDescripcion(txtDescripcionNormal1.getText().toUpperCase());
        art.setDescripcioncorta(txtDescripcionCorta1.getText().toUpperCase());
        provee.setIdproveedor(idproveedor);
        art.setProveedor(provee);
        clas.setIdclasificacion(idclasificacion);
        art.setClasificacion(clas);
        unidad.setId_unidad(ConsultarUnidadMedidaByNombre(cmbUnidadAsociados.getSelectedItem().toString()));
        art.setUnidadmedida(unidad);
        art.setCantidad_um(Float.parseFloat(spnpiezasasociados.getValue().toString()));
        art.setStock(stock);
        art.setStock_min(stock_min);
        art.setStock_max(stock_max);
        art.setPrecio_compra(Float.parseFloat(txtCosto1.getText()));
        art.setUtilidad(Float.parseFloat(txtUtilidad1.getText()));
        art.setPrecio_venta(Float.parseFloat(txtPrecioVenta1.getText()));
        art.setIva(iva);
        art.setFecha_registro(fecharegistro.get(Calendar.DAY_OF_MONTH)+"/"+fecharegistro.get(Calendar.MONTH)+"/"+fecharegistro.get(Calendar.YEAR));
        art.setArticulo_disponible(1);
        art.setCodasociados(txtCodigoBarrasAsociado1.getText());
        art.setTipo_articulo("anexo");
        ctrlarticulo.AddArticuloPrincipal(art);
        JOptionPane.showMessageDialog(null, "El artículo anexo "+txtDescripcionNormal1.getText().toUpperCase()+" fue registrado exitosamente");
        CleanFields();
    }//GEN-LAST:event_btnGuardarArticulo2ActionPerformed

    private void txtCodigoBarrasAsociado1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoBarrasAsociado1ActionPerformed
        ConsultarArticuloPrincipalByCod_Barras(txtCodigoBarrasAsociado1.getText());
    }//GEN-LAST:event_txtCodigoBarrasAsociado1ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private static void FillComboLinea(JComboBox cmbfill, JComboBox cmbConsult)
    {
        Coleccion coleccion = new Coleccion();
        final ArangoDB arangoDB = new 
          ArangoDB.Builder()
            .password("")
            .host("127.0.0.1")
            .port(8529)
            .user("root")
            .build();
     try {
        String query = "FOR subcat IN Clasificacion FOR linea IN Clasificacion FILTER subcat.id_clasificacion==linea.id_clasificacion_dep FILTER subcat.descripcion== @descripcion RETURN MERGE(subcat,linea)";
        Map<String, Object> bindVars = new MapBuilder().put("descripcion",cmbConsult.getSelectedItem().toString()).get();
        ArangoCursor<BaseDocument> cursor = arangoDB.db(coleccion.getNombrebd()).query(query, bindVars, null,
        BaseDocument.class);
        cursor.forEachRemaining(aDocument -> {
        cmbfill.addItem(aDocument.getAttribute("descripcion"));
        });
        
        }
        catch (ArangoDBException e)
        {
            System.err.println("Failed to execute query. " + e.getMessage());
        }   
    }
    
    private static void FillComboSubcategoria(JComboBox cmb)
    {
        Coleccion coleccion = new Coleccion();
        final ArangoDB arangoDB = new 
          ArangoDB.Builder()
            .password("")
            .host("127.0.0.1")
            .port(8529)
            .user("root")
            .build();
     try {
        String query = "FOR subcategoria IN Clasificacion FILTER subcategoria.nivel_clasificacion == @nivel_clasificacion RETURN subcategoria";
        Map<String, Object> bindVars = new MapBuilder().put("nivel_clasificacion",3).get();
        ArangoCursor<BaseDocument> cursor = arangoDB.db(coleccion.getNombrebd()).query(query, bindVars, null,
        BaseDocument.class);
        cursor.forEachRemaining(aDocument -> {
        cmb.addItem(aDocument.getAttribute("descripcion"));
        });
        
        }
        catch (ArangoDBException e)
        {
            System.err.println("Failed to execute query. " + e.getMessage());
        }
    }
    
    private static void FillComboCategoria(JComboBox cmb)
    {
        Coleccion coleccion = new Coleccion();
        final ArangoDB arangoDB = new 
          ArangoDB.Builder()
            .password("")
            .host("127.0.0.1")
            .port(8529)
            .user("root")
            .build();
     try {
        String query = "FOR subcategoria IN Clasificacion FILTER subcategoria.nivel_clasificacion == @nivel_clasificacion RETURN subcategoria";
        Map<String, Object> bindVars = new MapBuilder().put("nivel_clasificacion",2).get();
        ArangoCursor<BaseDocument> cursor = arangoDB.db(coleccion.getNombrebd()).query(query, bindVars, null,
        BaseDocument.class);
        cursor.forEachRemaining(aDocument -> {
        cmb.addItem(aDocument.getAttribute("descripcion"));
        });
        
        }
        catch (ArangoDBException e)
        {
            System.err.println("Failed to execute query. " + e.getMessage());
        }
    }
    
    private static void FillComboDepartamento(JComboBox cmb)
    {
        Coleccion coleccion = new Coleccion();
        final ArangoDB arangoDB = new 
          ArangoDB.Builder()
            .password("")
            .host("127.0.0.1")
            .port(8529)
            .user("root")
            .build();
     try {
        String query = "FOR subcategoria IN Clasificacion FILTER subcategoria.nivel_clasificacion == @nivel_clasificacion RETURN subcategoria";
        Map<String, Object> bindVars = new MapBuilder().put("nivel_clasificacion",1).get();
        ArangoCursor<BaseDocument> cursor = arangoDB.db(coleccion.getNombrebd()).query(query, bindVars, null,
        BaseDocument.class);
        cursor.forEachRemaining(aDocument -> {
        cmb.addItem(aDocument.getAttribute("descripcion"));
        });
        
        }
        catch (ArangoDBException e)
        {
            System.err.println("Failed to execute query. " + e.getMessage());
        }
    }
    
    private static void FillComboProveedores (JComboBox cmb)
    {
    Coleccion coleccion = new Coleccion();
        final ArangoDB arangoDB = new 
          ArangoDB.Builder()
            .password("")
            .host("127.0.0.1")
            .port(8529)
            .user("root")
            .build();
     try {
        String query = "FOR Proveedor IN Proveedor FILTER Proveedor.@nombre RETURN { nombre: CONCAT(Proveedor.nombrecontacto)}";
        Map<String, Object> bindVars = new MapBuilder().put("nombre", "nombrecontacto").get();
        ArangoCursor<BaseDocument> cursor = arangoDB.db(coleccion.getNombrebd()).query(query, bindVars, null,
        BaseDocument.class);
        cursor.forEachRemaining(aDocument -> {
        cmb.addItem(aDocument.getAttribute("nombre"));
        });
        
        }
        catch (ArangoDBException e)
        {
            System.err.println("Failed to execute query. " + e.getMessage());
        }
    }
    
    private static void FillComboUnidadMedida(JComboBox cmb)
    {
        Coleccion coleccion = new Coleccion();
        final ArangoDB arangoDB = new 
          ArangoDB.Builder()
            .password("")
            .host("127.0.0.1")
            .port(8529)
            .user("root")
            .build();
     try {
        String query = "FOR um IN UnidadMedida FILTER um.@descripcion RETURN { descripcion: CONCAT(um.descripcion)}";
        Map<String, Object> bindVars = new MapBuilder().put("descripcion", "descripcion").get();
        ArangoCursor<BaseDocument> cursor = arangoDB.db(coleccion.getNombrebd()).query(query, bindVars, null,
        BaseDocument.class);
        cursor.forEachRemaining(aDocument -> {
        cmb.addItem(aDocument.getAttribute("descripcion"));
        });
        
        }
        catch (ArangoDBException e)
        {
            System.err.println("Failed to execute query. " + e.getMessage());
        }
    }
    
    public void precioVenta()
	{   
    	//precioVenta es el resultado de la utilidad por el costo (sin redondear)
    	double precioVentaPorcentaje = Float.parseFloat(txtCosto.getText()) * Float.parseFloat("0."+txtUtilidad.getText());
        double precioVenta=Float.parseFloat(txtCosto.getText())+precioVentaPorcentaje;
   	 
    	//redondeoPrecio es la variable que almacena el precio redondeado
    	double redondeoPrecio;
    	redondeoPrecio = precioVenta * Math.pow(10, 1);  //aqui se recibe precioVenta para dedondearla
    	redondeoPrecio = Math.round(redondeoPrecio);
    	redondeoPrecio = redondeoPrecio/Math.pow(10, 1);
    	txtPrecioVenta.setText(String.valueOf(redondeoPrecio));
	}
    
    public void precioVentaAnexo()
	{   
    	//precioVenta es el resultado de la utilidad por el costo (sin redondear)
    	double precioVentaPorcentaje = Float.parseFloat(txtCosto1.getText()) * Float.parseFloat("0."+txtUtilidad1.getText());
        double precioVenta=Float.parseFloat(txtCosto1.getText())+precioVentaPorcentaje;
   	 
    	//redondeoPrecio es la variable que almacena el precio redondeado
    	double redondeoPrecio;
    	redondeoPrecio = precioVenta * Math.pow(10, 1);  //aqui se recibe precioVenta para dedondearla
    	redondeoPrecio = Math.round(redondeoPrecio);
    	redondeoPrecio = redondeoPrecio/Math.pow(10, 1);
    	txtPrecioVenta1.setText(String.valueOf(redondeoPrecio));
	}
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmArticulos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardarArticulo;
    private javax.swing.JButton btnGuardarArticulo2;
    private javax.swing.JCheckBox chbIva;
    private javax.swing.JComboBox cmbCategoria;
    private javax.swing.JComboBox cmbDepartamento;
    private javax.swing.JComboBox cmbLinea;
    private javax.swing.JComboBox cmbProveedor;
    private javax.swing.JComboBox cmbSubCategoria;
    private javax.swing.JComboBox cmbUnidadAsociados;
    private javax.swing.JComboBox cmbUnidadMedidaPrincipal;
    private javax.swing.JLabel etCategoria;
    private javax.swing.JLabel etCodigoBarras;
    private javax.swing.JLabel etCodigoBarras1;
    private javax.swing.JLabel etCodigoBarras2;
    private javax.swing.JLabel etCodigoInterno;
    private javax.swing.JLabel etCodigoInterno1;
    private javax.swing.JLabel etCosto;
    private javax.swing.JLabel etCosto1;
    private javax.swing.JLabel etDepartamento;
    private javax.swing.JLabel etDescripcionCorta;
    private javax.swing.JLabel etDescripcionCorta1;
    private javax.swing.JLabel etDescripcionNormal;
    private javax.swing.JLabel etDescripcionNormal1;
    private javax.swing.JLabel etIVA;
    private javax.swing.JLabel etLinea;
    private javax.swing.JLabel etPrecioVenta;
    private javax.swing.JLabel etPrecioVenta1;
    private javax.swing.JLabel etProveedor;
    private javax.swing.JLabel etProveedor2;
    private javax.swing.JLabel etProveedor3;
    private javax.swing.JLabel etStock;
    private javax.swing.JLabel etStockMaximo;
    private javax.swing.JLabel etStockMinimo;
    private javax.swing.JLabel etSubCategoria;
    private javax.swing.JLabel etTitulo;
    private javax.swing.JLabel etUnidad;
    private javax.swing.JLabel etUnidad1;
    private javax.swing.JLabel etUtilidad;
    private javax.swing.JLabel etUtilidad1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlAnexos;
    private javax.swing.JPanel pnlAsociados;
    private javax.swing.JSpinner spnStock;
    private javax.swing.JSpinner spnStockMaximo;
    private javax.swing.JSpinner spnStockMinimo;
    private javax.swing.JSpinner spnpiezas;
    private javax.swing.JSpinner spnpiezasasociados;
    private javax.swing.JTable tblArticulosDesign;
    private javax.swing.JTabbedPane tbpAsociados;
    private javax.swing.JTextField txtCodigoBarras;
    private javax.swing.JTextField txtCodigoBarras1;
    private javax.swing.JTextField txtCodigoBarrasAsociado1;
    private javax.swing.JTextField txtCodigoInterno;
    private javax.swing.JTextField txtCodigoInterno1;
    private javax.swing.JTextField txtCosto;
    private javax.swing.JTextField txtCosto1;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtDescripcionCorta;
    private javax.swing.JTextField txtDescripcionCorta1;
    private javax.swing.JTextField txtDescripcionNormal;
    private javax.swing.JTextField txtDescripcionNormal1;
    private javax.swing.JTextField txtIVA;
    private javax.swing.JTextField txtPrecioVenta;
    private javax.swing.JTextField txtPrecioVenta1;
    private javax.swing.JTextField txtUtilidad;
    private javax.swing.JTextField txtUtilidad1;
    // End of variables declaration//GEN-END:variables
}

